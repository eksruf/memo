5월 10일

[ 리눅스 명령어 ]
cd (지정) 
=지정한 디렉토리로 이동
cd ../
=전으로 이동

pwd
=현재 디렉토리 확인

mkdir
=현재 위치에 새로운 디렉토리 만들기
mkdir -p
=여러 디렉토리 만들기

ls
=현재 디렉토리 만들기
ls -a
=숨김파일까지 확인
ls -l
=디테일하게 확인
ls -R
=파일 속 파일 확일하기

rm (파일명)
=파일 삭제
rm -rf (파일명)
=파일을 강제로 삭제('f'는 강제)

touch
=파일 만들기

vim (파일명)
=파일 편집기 열기 
- 'i'를 눌러 글 삽입기능 키기
- esc 버튼을 누른 뒤 ':wq '입력하여 종료

cat (파일명)
= 파일 내용 확인

head (파일명)
=파일 내용 위에서 10줄 확인

tail (파일명)
=파일 내용 아래에서 10줄 확인

*head or tail -n (숫자) (파일명)
=지정한 숫자만큼 파일의 내용 확인

------------------------------

[ git 관련 명령어 ]

git init
= git 명령어 시작
- 관리할 폴어에만 생성 (컴이 제대로 실행이 안될 수 있음)
-항상 처음에 넣어주기

git
= git 관련 명령어 확인

git tsatus 
=현재 진행상황 확인 
- 눈에 익을때까지 자주 사용하기

git add (파일명)
=git에 파일 등록

git add --all
= .gitignore 폴더에 없는 모든 파일 add

git rm --cached (파일명)
=등록 삭제

git commit (파일명)
=파일 커밋

git commit -m " " (파일명)
=" "안에 메세지를 남기면서 커밋 
-" "의 내용이 자세하면 git log에서 파악하기 좋음

git commit -am " " (파일명)
=커밋과 add를 동시에 진행
-최초 생성한 파일은 불가능(add를 한번도 하지 않았다면 불가능)

git log (파일명) 
=커밋한 파일의 로그 확인

git log --oneline
=한줄로 로그 보기


git config --global user.name (이름)
사용자 이름 설정
git config --global user.email (이메일)
사용자의 이메일 설정

git remote add (별칭) (깃허브주소)
=별칭으로 깃허브 연동

git remote -v
=연동되어있는 깃허브 주소 확인

git remote rm (별칭)
=연동한 깃허브 주소 삭제

git push -u (별칭) (브런치)
=연동되어 있는 깃허브에 커밋이 완료된 파일 업로드

git restore --staged (파일명)
=스테이지에 add된 파일을 삭제

.gitignore
=git에 올리고 싶지 않은 or 커밋이나 add할 필요가 없는 파일을 제외시킨다.