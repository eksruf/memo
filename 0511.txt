브런치(branch)
= 여러 개발자들이 동시에 작업을 할 수 았게 해주는 기능
 -각자 독립적인 작업 영역 안에서 마음대로 소스코드를 변경할 수 있다.

마스터 브런치 (master branch)
= 저장소를 처음 만들면, git은 바로 'master'라는 이름의 브런치를 생성한다.
 이 저장소에 새로운 파일을 추가 한다거나 추가한 파일의 내용을 변경하여 
그 내용을 커밋 (commit)하는 것은 모두 마스터 브런치를 통해 처리할 수 있는 일이 된다.
'master'가 아닌 또 다른 새로운 브런치를 만들어서 체크아웃(checkout)하지 않는 이상,
이 때의 모든 작업은 마스터 브런치에서 이루어진다.

[브런치 명령어]

git branch
=브런치 리스트 확인
-현재 브런치에 별표표시

git branch (생성할 브런치명)
=브런치 생성

git branch -d (브런치명)
=생성된 브런치 삭제

git checkout (브런치명)
=브런치 변경

git log --oneline --all
=깃 로그 전체 확인하기 (합치기 전 브런치 포함)

git commit  -m "내용" 파일명
=커밋한 파일의 내용을 "  "안에 집어넣로 로그 확인할 때 확인
("  "의 내용이 자세하면 로그에서 쉽게 구분 가능)

git merge (브런치명)
=현재 작업중인 브런치에서 merge를 이요하여 작성한 브런치를 합친다

git checkout -p (브런치명)
=변경된 파일 한개만 업데이트 해주면서 브런치를 변경



[파일 복구 명령어]

git reset --hard (커밋로그)
=입력한 커밋로그의 파일로 돌아간다.

git revert (커밋로그)
=해당하는 커밋로그를 유지하고 되돌아간다.
(2단계 이상의 로그를 건너뛰려면 직접 수정해야 한다.)


[git hub]

깃허브가 가지고있는 커밋의 로그 수보다 현대 push하려는 로그 수 보다 많으면 push할 수 없다.


git push -uf
=강제로 깃허브로 push 할 수 있다

git pull
=깃허브로부터 커밋로그를 받는다.

------------------------------------------
브런치 관리를 위한 촐더를 생성한 뒤 
폴더 안에서 마우스 우클릭하여 git bash here로 들어가기
git init을 필수로 생성하여 git 관리